'''A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.

A half-open interval [left, right) denotes all the real numbers x where left <= x < right.

Implement the RangeModule class:

RangeModule() Initializes the object of the data structure.
void addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.
boolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.
void removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).'''

from bisect import bisect_left as bl
from bisect import bisect_right as br

class RangeModule(object):

    def __init__(self):
        self.track = []
        

    def addRange(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: None
        """
        start = bl(self.track, left)
        end = br(self.track, right)
        
        subtrack = []
        if start%2==0:
            subtrack.append(left)
        if end%2==0:
            subtrack.append(right)
            
        self.track[start:end] = subtrack
        
        

    def queryRange(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: bool
        """
        start = br(self.track, left)
        end = bl(self.track, right)
        
        return start==end and start%2==1
        

    def removeRange(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: None
        """
        start = bl(self.track, left)
        end = br(self.track, right)
        
        subtrack = []
        if start%2==1:
            subtrack.append(left)
        if end%2==1:
            subtrack.append(right)
            
        self.track[start:end] = subtrack
        


# Your RangeModule object will be instantiated and called as such:
# obj = RangeModule()
# obj.addRange(left,right)
# param_2 = obj.queryRange(left,right)
# obj.removeRange(left,right)
